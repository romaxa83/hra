syntax = "proto3";
package orders;

import "google/protobuf/timestamp.proto";

option go_package = "./;orders";

// Сервис заказов с определениями rpc-метода CRUD + List
service OrderService {
  // Создает новый заказ
  rpc CreateTest (CreateTestRequest) returns (TestResponse);

  // Создает новый заказ
  rpc Create (CreateOrderRequest) returns (CreateOrderResponse);

  // Извлекает существующий заказ
  rpc Retrieve (RetrieveOrderRequest) returns (RetrieveOrderResponse);

  // Изменяет существующий заказ
  rpc Update (UpdateOrderRequest) returns (UpdateOrderResponse);

  // Отменяет существующий заказ
  rpc Delete (DeleteOrderRequest) returns (DeleteOrderResponse);

  // Выдает список текущих заказов
  rpc List (ListOrderRequest) returns (ListOrderResponse);
}

// For test
message CreateTestRequest {
  string Name = 1;
}

message TestResponse {
  string Name = 1;
}

// Сообщение с деталями заказа (это и есть объект)
message Order {
  // Представляет различные состояния заказа
  enum Status {
    PENDING = 0;
    PAID = 1;
    SHIPPED = 2;
    DELIVERED = 3;
    CANCELLED = 4;
  }
  int64 order_id = 1;
  repeated Item items = 2;
  float total = 3;
  google.protobuf.Timestamp order_date = 5;
  Status status = 6;
}

// Сообщение с информацией об оплате
message PaymentMethod {
  enum Type {
    NOT_DEFINED = 0;
    VISA = 1;
    MASTERCARD = 2;
    PAYPAL = 3;
    APPLEPAY = 4;
  }
  Type payment_type = 1;
  string pre_authorization_token = 2;
}

// Сообщение с подробной информацией о товаре, который может быть включен в заказ
message Item {
  string description = 1;
  float price = 2;
}

// Запрос на создание заказа
message CreateOrderRequest {
  repeated Item items = 1;
  PaymentMethod payment_method = 2;
}

// Ответ на создание заказа
message CreateOrderResponse {
  Order order = 1;
}

// Запрос на получение заказа
message RetrieveOrderRequest {
  int64 order_id = 1;
}

// Ответ на получение заказа
message RetrieveOrderResponse {
  Order order = 1;
}

// Запрос на изменение существующего заказа
message UpdateOrderRequest {
  int64 order_id = 1;
  repeated Item items = 2;
  PaymentMethod payment_method = 3;
}

// Запрос на обновление существующего заказа
message UpdateOrderResponse {
  Order order = 1;
}

// Запрос на отмену существующего заказа
message DeleteOrderRequest {
  int64 order_id = 1;
}

// Ответ на отмену существующего заказа
message DeleteOrderResponse {
  Order order = 1;
}

// Запрос на выдачу списка текущих заказов
message ListOrderRequest {
  repeated int64 ids = 1;
  Order.Status statuses = 2;
}

// Ответ со списком заказов
message ListOrderResponse {
  repeated Order orders = 1;
}